.. This is demo.txt from the docutils project, stripped from any syntax that is
   not yet supported by structEd.
   (original: https://docutils.sourceforge.io/docs/user/rst/demo.txt)


reStructuredText Demonstration
==============================

.. Above is the document title, and below is the subtitle.
   They are transformed from section titles after parsing.


Examples of Syntax Constructs
-----------------------------


Structural Elements
~~~~~~~~~~~~~~~~~~~


Section Title
"""""""""""""

That's it, the text just above this line.


Transitions
"""""""""""

Here's a transition:

===============================================================================

It divides the section.


Body Elements
~~~~~~~~~~~~~


Paragraphs
""""""""""

A paragraph.


Inline Markup
+++++++++++++

Paragraphs contain text and may contain inline markup: *emphasis*, **strong
emphasis**, ``inline literals``, standalone hyperlinks (http://www.python.org),
external hyperlinks (Python_), internal cross-references (example_), external
hyperlinks with embedded URIs (`Python web site <http://www.python.org>`__),
..., and substitution references (|example|). Character-level inline markup is
also possible (although exceedingly ugly!) in  *re*\ ``Structured``\ *Text*.
Problems are indicated by |problematic| text (generated by processing errors;
this one is intentional).

.. DO NOT RE-WRAP THE FOLLOWING PARAGRAPH!

Let's test wrapping and whitespace significance in inline literals: ``This is
an example of --inline-literal --text, --including some--
strangely--hyphenated-words.  Adjust-the-width-of-your-browser-window to see
how the text is wrapped.  -- ---- --------  Now note    the spacing    between
the    words of    this sentence    (words should    be grouped    in pairs).``

If the ``--pep-references`` option was supplied, there should be a live link to
PEP 258 here.


Bullet Lists
""""""""""""

* A bullet list

  - Nested bullet list.

  - Nested item 2.

* Item 2.

  Paragraph 2 of item 2.

  - Nested bullet list.

  - Nested item 2.

    + Third level.

    + Item 2.

  - Nested item 3.


Enumerated Lists
""""""""""""""""

1. Arabic numerals.

   a) lower alpha)

      i. (lower roman)

         A) upper alpha.

            I. upper roman)


Literal Blocks
""""""""""""""

Literal blocks are indicated with a double-colon ("::") at the end of the
preceding paragraph (over there ``-->``).  They can be indented:

::

  if literal_block:
      text = 'is left as-is'
      spaces_and_linebreaks = 'are preserved'
      markup_processing = None

Or they can be quoted without indentation:

::

>> Great idea!
>
> Why didn't I think of that?


Block Quotes
""""""""""""

Block quotes consist of indented body elements:

  My theory by A. Elk.  Brackets Miss, brackets.  This theory goes as follows
  and begins now.  All brontosauruses are thin at one end, much much thicker in
  the middle and then thin again at the far end.  That is my theory, it is
  mine, and belongs to me and I own it, and what it is too.


Targets
"""""""

.. _example:

This paragraph is pointed to by the explicit "example" target. A reference can
be found under `Inline Markup`_, above. `Inline hyperlink targets`_ are also
possible.

Section headers are implicit targets, referred to by name. See Targets_, which
is a subsection of `Body Elements`_.

Explicit external targets are interpolated into references such as "Python_".

.. _python: http://www.python.org/

Here's a `hyperlink reference without a target`_, which generates an error.


Duplicate Target Names
++++++++++++++++++++++

Duplicate names in section headers or other implicit targets will generate
"info" (level-1) system messages.  Duplicate names in explicit targets will
generate "warning" (level-2) system messages.


Duplicate Target Names
++++++++++++++++++++++

Since there are two "Duplicate Target Names" section headers, we cannot
uniquely refer to either of them by name.  If we try to (like this: `Duplicate
Target Names`_), an error is generated.


Replacement Text
++++++++++++++++

I recommend you try |Python|_.

.. |Python| replace:: Python, *the* best language around


Comments
""""""""

Here's one:

.. Comments begin with two dots and a space. Anything may
   follow, except for the syntax of footnotes, hyperlink
   targets, directives, or substitution definitions.

   Double-dashes -- "--" -- must be escaped somehow in HTML output.
